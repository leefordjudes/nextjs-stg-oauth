generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHODOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @db.NVarChar(1000)
  type              String  @db.NVarChar(1000)
  provider          String  @db.NVarChar(1000)
  providerAccountId String  @db.NVarChar(1000)
  refresh_token     String? @db.NVarChar(Max)
  access_token      String? @db.NVarChar(Max)
  expires_at        Int?    @db.Int
  token_type        String? @db.NVarChar(1000)
  scope             String? @db.NVarChar(1000)
  id_token          String? @db.NVarChar(Max)
  session_state     String? @db.NVarChar(1000)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @db.NVarChar(1000) @unique
  userId       String   @db.NVarChar(1000)
  expires      DateTime @db.DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?   @db.NVarChar(1000)
  email         String?   @db.NVarChar(1000) @unique
  emailVerified DateTime? @db.DateTime2
  image         String?   @db.NVarChar(1000)
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  Comment       Comment[]
}

model VerificationToken {
  identifier String   @db.NVarChar(1000)
  token      String   @db.NVarChar(1000) @unique
  expires    DateTime @db.DateTime2

  @@unique([identifier, token])
}

model Topic {
  id          String  @id @default(cuid())
  slug        String  @unique
  description String  @db.NVarChar(Max)
  posts       Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id      String @id @default(cuid())
  title   String @db.NVarChar(1000)
  content String @db.NVarChar(Max)
  userId  String @db.NVarChar(1000)
  topicId String @db.NVarChar(1000)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic    Topic     @relation(fields: [topicId], references: [id])
  comments Comment[]
}

model Comment {
  id       String  @id @default(cuid())
  content  String  @db.NVarChar(Max)
  postId   String  @db.NVarChar(1000)
  userId   String  @db.NVarChar(1000)
  parentId String? @db.NVarChar(1000)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent   Comment?  @relation("Comments", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  post     Post      @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user     User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Comment[] @relation("Comments")
}
